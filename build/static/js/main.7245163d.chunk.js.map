{"version":3,"sources":["SectionSlice.js","Wheel.js","App.js","index.js"],"names":["angle","Section","styled","div","ColoredSection","props","color","sectionAngle","highlight","SectionSlice","sections","winnerColor","map","sectionColor","Wheel","animated","App","colorCount","shouldRotate","onStop","useSpring","config","mass","tension","friction","clamp","onRest","spring","setSpring","rotationAngle","index","Math","floor","useEffect","round","random","style","transform","interpolate","slice","FlexColumnCenter","Button","button","ArrowUp","useState","setColorCount","isRotating","setIsRotating","setWinnerColor","zIndex","marginBottom","value","onChange","event","target","disabled","colorNumber","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAEIA,EAAQ,EAENC,EAAUC,IAAOC,IAAV,wKAUPC,EAAiBF,YAAOD,EAAPC,CAAH,4HACE,SAACG,GAAD,OAAWA,EAAMC,SACjB,SAACD,GAAD,OAAWA,EAAML,SACtB,SAACK,GAAD,OAAW,GAAKA,EAAME,gBAC3B,SAACF,GAAD,OAAYA,EAAMG,UAAY,mBAAqB,MAGhD,SAASC,EAAT,GAAgE,IAAxCC,EAAuC,EAAvCA,SAAUH,EAA6B,EAA7BA,aAAcI,EAAe,EAAfA,YAC7D,OAAOD,EAASE,KAAI,SAACC,GAEnB,OADAb,GAAgBO,EAEd,cAACH,EAAD,CAEEE,MAAOO,EACPb,MAAOA,EACPO,aAAcA,EACdC,UAAWG,IAAgBE,GAJtBb,M,MCPTO,E,aAbEO,EAAQC,YAASb,IAAOC,IAAP,MAAD,iQAeP,SAASa,EAAT,GAAiE,IAAlDC,EAAiD,EAAjDA,WAAYN,EAAqC,EAArCA,YAAaO,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,OACnEZ,EAAe,IAAMU,EADwD,MAGjDG,aAAU,iBAAO,CAC3CpB,MAAO,EACPqB,OAAQ,CACNC,KAAMD,IACNE,QAASF,IACTG,SAAUH,IACVI,OAAO,GAETC,OAAQA,MAXmE,mBAGtEC,EAHsE,KAG9DC,EAH8D,KAc7E,SAASF,EAAT,GAA4B,IAAV1B,EAAS,EAATA,MAChB,GAAc,IAAVA,EAAa,CACf,IAAI6B,EAAgB7B,EAAQ,IACxB6B,EAAgB,IAClBA,EAAgB,IAAMA,GAExB,IAAMC,EAAQC,KAAKC,OAAO,IAAMH,GAAiBtB,GACjDY,EAAOW,IAYX,OARAG,qBAAU,WACJf,GACFU,EAAU,CACR5B,MAAO+B,KAAKG,MAAsB,IAAhBH,KAAKI,SAAmC,IAAhBJ,KAAKI,cAGlD,CAACP,EAAWV,IAGb,cAACJ,EAAD,CACEsB,MAAO,CACLC,UAAWV,EAAO3B,MAAMsC,aAAY,SAACtC,GAAD,uBAAqBA,EAArB,YAFxC,SAKE,cAACS,EAAD,CACEC,SAAUW,IAAgBkB,MAAM,EAAGtB,GACnCV,aAAcA,EACdI,YAAaA,MC1DrB,IAAM6B,EAAmBtC,IAAOC,IAAV,6HAOhBsC,EAASvC,IAAOwC,OAAV,oMAMU,SAACrC,GAAD,OAAWA,EAAMC,SAGjCqC,EAAUzC,IAAOC,IAAV,6WAkBE,SAASa,IAAO,IAAD,EACQ4B,mBAAS,GADjB,mBACrB3B,EADqB,KACT4B,EADS,OAEQD,oBAAS,GAFjB,mBAErBE,EAFqB,KAETC,EAFS,OAGUH,mBAAS,IAHnB,mBAGrBjC,EAHqB,KAGRqC,EAHQ,KAoB5B,OACE,eAACR,EAAD,WACE,iDACA,sBAAKJ,MAAO,CAAEa,OAAQ,EAAGC,aAAc,QAAvC,UACE,uDACA,wBACEC,MAAOlC,EACPmC,SAtBR,SAA2BC,GACzBL,EAAe,IACfH,GAAeQ,EAAMC,OAAOH,QAqBtBI,SAAUT,EAHZ,SAKGzB,IAAmBT,KAAI,SAAC4C,GAAD,OACtB,iCAA2BA,GAAdA,WAInB,cAAC,EAAD,CACEvC,WAAYA,EACZN,YAAaA,EACbqC,eAAgBA,EAChB9B,aAAc4B,EACd3B,OA9BN,SAAgBW,GACdkB,EAAe3B,IAAgBS,IAC/BiB,GAAc,MA8BZ,cAACJ,EAAD,IACA,cAACF,EAAD,CACEgB,QA7BN,SAA6B3B,GAC3BkB,EAAe,IACfD,GAAc,IA4BVzC,MAAOK,EACP4C,SAAUT,EAHZ,uBC7ENY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.7245163d.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nlet angle = 0;\r\n\r\nconst Section = styled.div`\r\n  width: 60%;\r\n  height: 60%;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform-origin: left top;\r\n  border: 2px solid white;\r\n`;\r\n\r\nconst ColoredSection = styled(Section)`\r\n  background-color: ${(props) => props.color};\r\n  transform: rotate(${(props) => props.angle}deg)\r\n    skew(0deg, ${(props) => 90 - props.sectionAngle}deg);\r\n  border: ${(props) => (props.highlight ? \"4px dashed black\" : \"\")};\r\n`;\r\n\r\nexport default function SectionSlice({ sections, sectionAngle, winnerColor }) {\r\n  return sections.map((sectionColor) => {\r\n    angle = angle + sectionAngle;\r\n    return (\r\n      <ColoredSection\r\n        key={angle}\r\n        color={sectionColor}\r\n        angle={angle}\r\n        sectionAngle={sectionAngle}\r\n        highlight={winnerColor === sectionColor}\r\n      />\r\n    );\r\n  });\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { animated, useSpring } from \"react-spring\";\r\nimport styled from \"styled-components\";\r\nimport SectionSlice from \"./SectionSlice\";\r\nimport * as config from \"./config.json\";\r\n\r\nconst Wheel = animated(styled.div`\r\n  position: relative;\r\n  border-radius: 50%;\r\n  height: 84vw;\r\n  width: 84vw;\r\n  max-width: 65vh;\r\n  max-height: 65vh;\r\n  overflow: hidden;\r\n  box-shadow: 0 5px 30px 0 rgba(0, 0, 0, 0.4);\r\n  border: 2px solid black;\r\n  margin: 10px;\r\n`);\r\n\r\nlet sectionAngle;\r\n\r\nexport default function App({ colorCount, winnerColor, shouldRotate, onStop }) {\r\n  sectionAngle = 360 / colorCount;\r\n\r\n  const [spring, setSpring] = useSpring(() => ({\r\n    angle: 0,\r\n    config: {\r\n      mass: config.mass,\r\n      tension: config.tension,\r\n      friction: config.friction,\r\n      clamp: true,\r\n    },\r\n    onRest: onRest,\r\n  }));\r\n\r\n  function onRest({ angle }) {\r\n    if (angle !== 0) {\r\n      let rotationAngle = angle % 360;\r\n      if (rotationAngle < 0) {\r\n        rotationAngle = 360 + rotationAngle;\r\n      }\r\n      const index = Math.floor((360 - rotationAngle) / sectionAngle);\r\n      onStop(index);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (shouldRotate) {\r\n      setSpring({\r\n        angle: Math.round(Math.random() * 50000 + Math.random() * 50000),\r\n      });\r\n    }\r\n  }, [setSpring, shouldRotate]);\r\n\r\n  return (\r\n    <Wheel\r\n      style={{\r\n        transform: spring.angle.interpolate((angle) => `rotate(${angle}deg)`),\r\n      }}\r\n    >\r\n      <SectionSlice\r\n        sections={config.sections.slice(0, colorCount)}\r\n        sectionAngle={sectionAngle}\r\n        winnerColor={winnerColor}\r\n      />\r\n    </Wheel>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Wheel from \"./Wheel\";\nimport * as config from \"./config.json\";\n\nconst FlexColumnCenter = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Button = styled.button`\n  padding: 10px 20px;\n  border-radius: 5px;\n  border: 1px solid grey;\n  box-shadow: 0 5px 25px 0 rgba(0, 0, 0, 0.25);\n  cursor: pointer;\n  background-color: ${(props) => props.color};\n`;\n\nconst ArrowUp = styled.div`\n  width: 0;\n  height: 0;\n  border-left: 30px solid transparent;\n  border-right: 30px solid transparent;\n  border-bottom: 50px solid black;\n  position: relative;\n  bottom: 30px;\n\n  @media (min-width: 375px) {\n    border-bottom: 80px solid black;\n  }\n\n  @media (min-width: 768px) {\n    border-bottom: 100px solid black;\n  }\n`;\n\nexport default function App() {\n  const [colorCount, setColorCount] = useState(3);\n  const [isRotating, setIsRotating] = useState(false);\n  const [winnerColor, setWinnerColor] = useState(\"\");\n\n  function colorCountHandler(event) {\n    setWinnerColor(\"\");\n    setColorCount(+event.target.value);\n  }\n\n  function onStop(index) {\n    setWinnerColor(config.sections[index]);\n    setIsRotating(false);\n  }\n\n  function rotateClickhHandler(index) {\n    setWinnerColor(\"\");\n    setIsRotating(true);\n  }\n\n  return (\n    <FlexColumnCenter>\n      <h1>Wheel of Colors</h1>\n      <div style={{ zIndex: 1, marginBottom: \"10px\" }}>\n        <label>Number of colors: </label>\n        <select\n          value={colorCount}\n          onChange={colorCountHandler}\n          disabled={isRotating}\n        >\n          {config.colorsCount.map((colorNumber) => (\n            <option key={colorNumber}>{colorNumber}</option>\n          ))}\n        </select>\n      </div>\n      <Wheel\n        colorCount={colorCount}\n        winnerColor={winnerColor}\n        setWinnerColor={setWinnerColor}\n        shouldRotate={isRotating}\n        onStop={onStop}\n      />\n      <ArrowUp />\n      <Button\n        onClick={rotateClickhHandler}\n        color={winnerColor}\n        disabled={isRotating}\n      >\n        Rotate\n      </Button>\n    </FlexColumnCenter>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}